//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Expr.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrTreeRewriterTests {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ADD=1, MIN=2, MUL=3, DIV=4, MOD=5, AND=6, OR=7, OPAR=8, CPAR=9, ID=10, 
		NUM=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ADD", "MIN", "MUL", "DIV", "MOD", "AND", "OR", "OPAR", "CPAR", "ID", 
		"NUM", "WS"
	};


	public ExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ADD", "MIN", "MUL", "DIV", "MOD", "AND", "OR", "OPAR", "CPAR", 
		"ID", "NUM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,72,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,5,9,48,8,
		9,10,9,12,9,51,9,9,1,10,4,10,54,8,10,11,10,12,10,55,1,10,1,10,4,10,60,
		8,10,11,10,12,10,61,3,10,64,8,10,1,11,4,11,67,8,11,11,11,12,11,68,1,11,
		1,11,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
		1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,
		0,9,10,13,13,32,32,76,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,27,1,0,0,0,5,29,1,0,0,0,
		7,31,1,0,0,0,9,33,1,0,0,0,11,35,1,0,0,0,13,38,1,0,0,0,15,41,1,0,0,0,17,
		43,1,0,0,0,19,45,1,0,0,0,21,53,1,0,0,0,23,66,1,0,0,0,25,26,5,43,0,0,26,
		2,1,0,0,0,27,28,5,45,0,0,28,4,1,0,0,0,29,30,5,42,0,0,30,6,1,0,0,0,31,32,
		5,47,0,0,32,8,1,0,0,0,33,34,5,37,0,0,34,10,1,0,0,0,35,36,5,38,0,0,36,37,
		5,38,0,0,37,12,1,0,0,0,38,39,5,124,0,0,39,40,5,124,0,0,40,14,1,0,0,0,41,
		42,5,40,0,0,42,16,1,0,0,0,43,44,5,41,0,0,44,18,1,0,0,0,45,49,7,0,0,0,46,
		48,7,1,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,
		20,1,0,0,0,51,49,1,0,0,0,52,54,7,2,0,0,53,52,1,0,0,0,54,55,1,0,0,0,55,
		53,1,0,0,0,55,56,1,0,0,0,56,63,1,0,0,0,57,59,5,46,0,0,58,60,7,2,0,0,59,
		58,1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,
		57,1,0,0,0,63,64,1,0,0,0,64,22,1,0,0,0,65,67,7,3,0,0,66,65,1,0,0,0,67,
		68,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,71,6,11,0,0,71,
		24,1,0,0,0,6,0,49,55,61,63,68,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrTreeRewriterTests
