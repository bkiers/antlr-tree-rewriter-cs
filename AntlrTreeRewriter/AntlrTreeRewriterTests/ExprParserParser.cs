//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/ExprParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExprParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, ADD=3, MIN=4, MUL=5, DIV=6, MOD=7, OPAR=8, CPAR=9, ID=10, 
		NUM=11;
	public const int
		RULE_parse = 0, RULE_expr = 1, RULE_or_expr = 2, RULE_and_expr = 3, RULE_add_expr = 4, 
		RULE_mult_expr = 5, RULE_unary_expr = 6, RULE_atom = 7;
	public static readonly string[] ruleNames = {
		"parse", "expr", "or_expr", "and_expr", "add_expr", "mult_expr", "unary_expr", 
		"atom"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "ADD", "MIN", "MUL", "DIV", "MOD", "OPAR", "CPAR", 
		"ID", "NUM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExprParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExprParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExprParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExprParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExprParserParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			expr();
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext or_expr() {
			return GetRuleContext<Or_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			or_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr() {
			return GetRuleContext<And_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ExprParserParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Or_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expr; } }
	}

	[RuleVersion(0)]
	public Or_exprContext or_expr() {
		Or_exprContext _localctx = new Or_exprContext(Context, State);
		EnterRule(_localctx, 4, RULE_or_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			and_expr();
			State = 24;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 22;
				Match(OR);
				State = 23;
				expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_exprContext add_expr() {
			return GetRuleContext<Add_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ExprParserParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 6, RULE_and_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			add_expr();
			State = 29;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 27;
				Match(AND);
				State = 28;
				expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ExprParserParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(ExprParserParser.MIN, 0); }
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		Add_exprContext _localctx = new Add_exprContext(Context, State);
		EnterRule(_localctx, 8, RULE_add_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			mult_expr();
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 32;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==MIN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 33;
				expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ExprParserParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ExprParserParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ExprParserParser.MOD, 0); }
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		Mult_exprContext _localctx = new Mult_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_mult_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			unary_expr();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 224L) != 0) {
				{
				State = 37;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 224L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 38;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(ExprParserParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_unary_expr);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				Match(MIN);
				State = 42;
				atom();
				}
				break;
			case OPAR:
			case ID:
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(ExprParserParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(ExprParserParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExprParserParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ExprParserParser.NUM, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				Match(OPAR);
				State = 47;
				expr();
				State = 48;
				Match(CPAR);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				Match(ID);
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,11,55,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,3,2,25,8,2,1,3,1,3,1,3,3,3,30,8,3,
		1,4,1,4,1,4,3,4,35,8,4,1,5,1,5,1,5,3,5,40,8,5,1,6,1,6,1,6,3,6,45,8,6,1,
		7,1,7,1,7,1,7,1,7,1,7,3,7,53,8,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,2,1,0,
		3,4,1,0,5,7,53,0,16,1,0,0,0,2,19,1,0,0,0,4,21,1,0,0,0,6,26,1,0,0,0,8,31,
		1,0,0,0,10,36,1,0,0,0,12,44,1,0,0,0,14,52,1,0,0,0,16,17,3,2,1,0,17,18,
		5,0,0,1,18,1,1,0,0,0,19,20,3,4,2,0,20,3,1,0,0,0,21,24,3,6,3,0,22,23,5,
		1,0,0,23,25,3,2,1,0,24,22,1,0,0,0,24,25,1,0,0,0,25,5,1,0,0,0,26,29,3,8,
		4,0,27,28,5,2,0,0,28,30,3,2,1,0,29,27,1,0,0,0,29,30,1,0,0,0,30,7,1,0,0,
		0,31,34,3,10,5,0,32,33,7,0,0,0,33,35,3,2,1,0,34,32,1,0,0,0,34,35,1,0,0,
		0,35,9,1,0,0,0,36,39,3,12,6,0,37,38,7,1,0,0,38,40,3,2,1,0,39,37,1,0,0,
		0,39,40,1,0,0,0,40,11,1,0,0,0,41,42,5,4,0,0,42,45,3,14,7,0,43,45,3,14,
		7,0,44,41,1,0,0,0,44,43,1,0,0,0,45,13,1,0,0,0,46,47,5,8,0,0,47,48,3,2,
		1,0,48,49,5,9,0,0,49,53,1,0,0,0,50,53,5,10,0,0,51,53,5,11,0,0,52,46,1,
		0,0,0,52,50,1,0,0,0,52,51,1,0,0,0,53,15,1,0,0,0,6,24,29,34,39,44,52
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
